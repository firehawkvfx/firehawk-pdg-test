#!/bin/bash
set -e
EXECDIR="$(pwd)"

SOURCE=${BASH_SOURCE[0]} # resolve the script dir even if a symlink is used to this script
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTDIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

echo "Wait until deadline10launcher has started and storage mounts are present..."

tries=0
max_tries=90
until [ $tries -gt $max_tries ] || service deadline10launcher status | grep -m 1 "Active: active (running)"; do
  tries=$(( $tries + 1 ))
  sleep 10
done
if [ $tries -gt $max_tries ]; then
  echo "Command timed out before service arrived"
  exit 1
fi

echo "...deadline10launcher running."
echo "Run test."

cd $SCRIPTDIR
pwsh "$SCRIPTDIR/../tests/acceptance/test-pdg-spot/test-pdg-spot.ps1" -os_type linux
# source ../update_vars.sh

# if [[ "$FH_VAR_target_infra_state" == "destroy" ]]; then
#   echo "Will destroy infra..."
#   ../deploy/destroy
# else
#   echo "Will deploy infra..."
#   ../init/init-deploy
#   ../vault-init/init
#   ../vault-init/configure
#   ../deploy/apply
# fi
cd $EXECDIR